<!DOCTYPE html>

<html>

<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

	<title>interactive BAG viewer</title>

	<meta charset="utf-8" />
 <link href='http://fonts.googleapis.com/css?family=Ubuntu:400,700|Vollkorn' rel='stylesheet' type='text/css'>
	<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.css" />
<!--[if lte IE 8]>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.ie.css" />
<![endif]-->
	<link rel="stylesheet" href="jquery-ui-1.10.3.custom/css/ui-darkness/jquery-ui-1.10.3.custom.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
	<script src="jquery-ui-1.10.3.custom/js/jquery-ui-1.10.3.custom.min.js"></script>
<script src="http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.js"></script>
<script type="text/javascript" src="http://maps.stamen.com/js/tile.stamen.js?v1.2.4"></script>
	<script>
	$(document).ready(function () {
		$( "#slider" ).slider({min:1600,max:2012,
		value: 2012,
			slide: function( event, ui ) {
				$( "#year" ).val( ui.value );
				changeYear(ui.value);
                hash.onMapMove();
			},

		});
		$( "#slider2" ).slider({min:0,max:1,
		value: 0.4,
		step: 0.01,
			slide: function( event, ui ) {
				setOpacity(ui.value);
			}

		});

		$( "#year" ).val( $( "#slider" ).slider( "values", 0 ) );
		$('.searchbutton').click(function(){
			geocode();
			
			return false;
		});
		$('#searchform').submit(function(){
			geocode();
			
			return false;
		});
        $('.footnote').click(function(){
            $('#footnotediv').toggle('slide');
        });
	});
	</script>
 <link href="style.css" rel="stylesheet">
</head>

<body>
<div id="all" class="row">
	<div id="map" style=" box-shadow: 0px 2px 5px #888888 inset; height: 100%; display:block;left: 0px; top: 0px; right: 260px; bottom: 0px; position: absolute;"></div>
	<div id='sidepanel'>
	<div id="content">
	<p class="info">
	<input type="text" id="year" size="3" class="y2000" value=""/>
<strong class="lower">built before</strong>
 	</p>
	<div id="slider" title="Slide this to view only buildings build before a given year"></div>

<h2>LEGEND</h2>
  
    <table>
    <tr>
   <td><span class="kleur k00">&nbsp;</span> < 1600</td><td><span class="kleur k1850">&nbsp;</span> 1850 - 1900<br/></td>
   </tr><tr>
   <td><span class="kleur k1600">&nbsp;</span>1600 - 1700 </td><td><span class="kleur k1900">&nbsp;</span> 1900 - 1950<br/></td>
   </tr><tr>
   <td><span class="kleur k1700">&nbsp;</span>1700 - 1800</td><td><span class="kleur k1950">&nbsp;</span> 1950 - 2000 <br/></td>
   </tr><tr>
   <td><span class="kleur k1800">&nbsp;</span>1800 - 1850</td><td><span class="kleur k2000">&nbsp;</span> > 2000<br/></td>
   </tr>
   </table>
<p>
	
 <h2>INFORMATION</h2>
 <p>Based on the open dataset BAG, this viewer shows the growth of cities based on the year of construction. 
 </p>
 <h2>BACKGROUND</h2>
	<span id="slider2"  title="Slide this to change the background opacity"></span><input id="opacity" value="80%"/>

	</div>

  
   
	</div>
	</div>

</div>
<script>
(function(window) {
	var HAS_HASHCHANGE = (function() {
		var doc_mode = window.documentMode;
		return ('onhashchange' in window) &&
			(doc_mode === undefined || doc_mode > 7);
	})();

	L.Hash = function(map) {
		this.onHashChange = L.Util.bind(this.onHashChange, this);

		if (map) {
			this.init(map);
		}
	};

	L.Hash.parseHash = function(hash) {
		if(hash.indexOf('#') === 0) {
			hash = hash.substr(1);
		}
		var args = hash.split("/");
		if (args.length == 4) {
			var zoom = parseInt(args[0], 10),
			lat = parseFloat(args[1]),
			lon = parseFloat(args[2]);
            year = parseInt(args[3]);
			if (isNaN(zoom) || isNaN(lat) || isNaN(lon)|| isNaN(year)) {
				return false;
			} else {
                $( "#slider" ).slider("option", "value", year);
                $( "#year" ).val( year );
				changeYear(year);
				return {
					center: new L.LatLng(lat, lon),
					zoom: zoom
				};
			}
		} else {
			return false;
		}
	};

	L.Hash.formatHash = function(map) {
		var center = map.getCenter(),
		    zoom = map.getZoom(),
		    precision = Math.max(0, Math.ceil(Math.log(zoom) / Math.LN2));
            year = parseInt($( "#year" ).val());

		return "#" + [zoom,
			center.lat.toFixed(precision),
			center.lng.toFixed(precision),
            year
		].join("/");
	},

	L.Hash.prototype = {
		map: null,
		lastHash: null,

		parseHash: L.Hash.parseHash,
		formatHash: L.Hash.formatHash,

		init: function(map) {
			this.map = map;

			// reset the hash
			this.lastHash = null;
			this.onHashChange();

			if (!this.isListening) {
				this.startListening();
			}
		},

		removeFrom: function(map) {
			if (this.changeTimeout) {
				clearTimeout(this.changeTimeout);
			}

			if (this.isListening) {
				this.stopListening();
			}

			this.map = null;
		},

		onMapMove: function() {
			// bail if we're moving the map (updating from a hash),
			// or if the map is not yet loaded

			if (this.movingMap || !this.map._loaded) {
				return false;
			}

			var hash = this.formatHash(this.map);
			if (this.lastHash != hash) {
				location.replace(hash);
				this.lastHash = hash;
			}
		},

		movingMap: false,
		update: function() {
			var hash = location.hash;
			if (hash === this.lastHash) {
				return;
			}
			var parsed = this.parseHash(hash);
			if (parsed) {
				this.movingMap = true;

				this.map.setView(parsed.center, parsed.zoom);

				this.movingMap = false;
			} else {
				this.onMapMove(this.map);
			}
		},

		// defer hash change updates every 100ms
		changeDefer: 100,
		changeTimeout: null,
		onHashChange: function() {
			// throttle calls to update() so that they only happen every
			// `changeDefer` ms
			if (!this.changeTimeout) {
				var that = this;
				this.changeTimeout = setTimeout(function() {
					that.update();
					that.changeTimeout = null;
				}, this.changeDefer);
			}
		},

		isListening: false,
		hashChangeInterval: null,
		startListening: function() {
			this.map.on("moveend", this.onMapMove, this);

			if (HAS_HASHCHANGE) {
				L.DomEvent.addListener(window, "hashchange", this.onHashChange);
			} else {
				clearInterval(this.hashChangeInterval);
				this.hashChangeInterval = setInterval(this.onHashChange, 50);
			}
			this.isListening = true;
		},

		stopListening: function() {
			this.map.off("moveend", this.onMapMove, this);

			if (HAS_HASHCHANGE) {
				L.DomEvent.removeListener(window, "hashchange", this.onHashChange);
			} else {
				clearInterval(this.hashChangeInterval);
			}
			this.isListening = false;
		}
	};
	L.hash = function(map) {
		return new L.Hash(map);
	};
	L.Map.prototype.addHash = function() {
		this._hash = L.hash(this);
	};
	L.Map.prototype.removeHash = function() {
		this._hash.removeFrom();
	};
})(window);
		var map = new L.Map('map',{maxZoom:16});	
		//Background map
		var layer = new L.StamenTileLayer("toner");
        layer.setOpacity(0.4);
		map.setView(new L.LatLng(52.36, 4.88), 13).addLayer(layer);
		bagatttr = 'BAG data &copy; bag.vrom.nl';	

		//Create a canvas layer on which to draw the BAG data
		var canvasTiles = new L.TileLayer.Canvas( {tms: true, minZoom: 9, maxZoom: 16, attribution: bagatttr});
var hash = new L.Hash(map);
/*
On initialising a canvas tile, use the drawTile function to loop through each pixel and assign color and alpha values based on the current year and the r-value of the data.
*/     
getJaar = function() {
	var jaar = parseInt($( "#year" ).val());
	//We default to 2012
	if (jaar == 'NaN') jaar = 2012;
	
	//this is the value of year as encoded in the pngs
	var jr = 0;
	if (jaar < 1600) {
		jr =1;
	}
	else if (jaar >=1600 && jaar <1700) {
		jr =10;
	}
	else if (jaar >=1700 && jaar <1800) {
		jr = 20;
	}
	else if (jaar >=1800 && jaar <1850) {
		jr = 30;
	}
	if(jaar > 1850) {
		jr = 50 + jaar -1850;
	}
	return jr;
};

canvasTiles._loadTile= function (tile, tilePoint) {
		tile._layer = this;
		tile._tilePoint = tilePoint;
            this._adjustTilePoint(tilePoint);
		this._redrawTile(tile);

		if (!this.options.async) {
			this.tileDrawn(tile);
		}
	};
canvasTiles.drawTile = function(canvas, tilePoint, zoom) {

	var jr = getJaar();
	
    var ctx = canvas.getContext('2d');
	var img = new Image();
	//The tiles need to come from a local source to prevent cross-origin problems
	var url = 'http://bag.edugis.nl/tiles/tilecache.py/ibag/'+zoom+'/'+tilePoint.x+'/'+tilePoint.y+'.png';
	//On the img.onload store the original data of the png to the canvas element and loop through all the pixels.
	img.crossOrigin = "Anonymous";
	img.onload = function(){  
		var height = 256;
		var width = 256;
		ctx.drawImage(img,0,0);		
		imageData = ctx.getImageData(0, 0, 256, 256);
		$(canvas).data('iData',imageData);
		//color the pixels of the canvas
		colorPixels(canvas);
    }
	img.src= url;
    
}
map.addLayer(canvasTiles);

//function to color the pixels of the canvas based on the pixel value and the current selected year
colorPixels = function(canvas) {
	var jr = getJaar();
	var ctx = canvas.getContext('2d');
		var imageData = ctx.createImageData(256,256);
		if($(canvas).data('iData')) {
      		oImageData = $(canvas).data('iData');
      		for (y = 0; y < 256; y++) {		
     			inpos = y * 256 * 4; // *4 for 4 ints per pixel
     			outpos =inpos ;
     			for (x = 0; x < 256; x++) {
      				var r = oImageData.data[inpos++]; // less red
      				var g = oImageData.data[inpos++]; // less green
      				var b = oImageData.data[inpos++]; // MORE BLUE
      				var a = oImageData.data[inpos++];     // same alpha
					var rn =r; //store the original red value
				
				//The pixel is newer than the year so don't show it
				//also the nodata pixels should stay invisible
                
				if(r>jr ||r == 0) a =0;
				
				//the pixel is older than the year so show it and color it depending on the r value
				else { a =255;  
					if(r <=1) {
						rn =0;
						b =0;
						g =0;
					}// before 1600
					else if (r > 1 && r <=10) {
						rn = 136;
						g = 138;
						b = 133;
					}//1600-1700
					else if (r > 10 && r <=20) {
						rn = 92;
						g = 53;
						b = 102;
					}//1700-1800
					else if (r > 20 && r <=30){
						rn = 117;
						g = 80;
						b = 123;
					}//1800-1850
					else if (r > 30 && r <=100) {
						rn = 150;
						g = 0;
						b = 0;
					}//1850-1900
					else if (r > 100 && r <=150) {
						rn = 255;
						g = 0;
						b = 0;
					}//1900-1950
					else if (r > 150 && r <=200) {
						rn = 245;
						g = 121;
						b = 0;
					}//1950-2000
					else if (r > 200 && r <=250 ){
						rn = 237;
						g =212;
						b = 0;
					}//2000-2050						  						
				}
				imageData.data[outpos++] = rn;
				imageData.data[outpos++] = g;
				imageData.data[outpos++] = b;
				imageData.data[outpos++] = a;
     			}
      		}
    		}
		ctx.putImageData(imageData, 0, 0);
}


changeYear = function(jaar) {
	//update the color of the year
    var sv = $( "#year" );
    if(jaar<1700) {
    sv.removeClass('y1700').removeClass('y1800').removeClass('y1850').removeClass('y1900').removeClass('y1950').removeClass('y2000').addClass('y1600');
    
    }
    if(jaar>=1700 && jaar< 1800) {
    sv.removeClass('y1600').removeClass('y1800').removeClass('y1850').removeClass('y1900').removeClass('y1950').removeClass('y2000').addClass('y1700');
        }
    if(jaar>=1800 && jaar< 1850) {
        sv.removeClass('y1700').removeClass('y1600').removeClass('y1850').removeClass('y1900').removeClass('y1950').removeClass('y2000').addClass('y1800');
    }
    if(jaar>=1850 && jaar< 1900) {
        sv.removeClass('y1700').removeClass('y1800').removeClass('y1600').removeClass('y1900').removeClass('y1950').removeClass('y2000').addClass('y1850');
    }
    if(jaar>=1900 && jaar< 1950) {
        sv.removeClass('y1700').removeClass('y1800').removeClass('y1850').removeClass('y1600').removeClass('y1950').removeClass('y2000').addClass('y1900');
    }
    if(jaar>=1950 && jaar< 2000) {
        sv.removeClass('y1700').removeClass('y1800').removeClass('y1850').removeClass('y1900').removeClass('y1600').removeClass('y2000').addClass('y1950');
    }
    if(jaar>=2000) {
        sv.removeClass('y1700').removeClass('y1800').removeClass('y1850').removeClass('y1900').removeClass('y1950').removeClass('y1600').addClass('y2000');
    }
    
	var canvi = $("canvas");
	for (i = 0; i < canvi.length; i++) {
		var canvas = canvi[i];
		colorPixels(canvas);
	}
}

//set the opacity of the background map
setOpacity = function(opac) {
  layer.setOpacity(opac);
}


	</script>

</body>
</html>
